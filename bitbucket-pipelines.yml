image:
    name: nakamapartneringservices/nakama-pipelines
    username: $DOCKER_HUB_USERNAME
    password: $DOCKER_HUB_PASSWORD
    email: DOCKER_HUB_EMAIL # seems to be mandatory

pipelines:
    pull-requests:
        '{feature,bugfix,hotfix}/*': # Note: only work for source branches, not target branches.
            - parallel:
                  - step:
                        name: Verify formatting
                        script:
                            - CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r origin/$BITBUCKET_PR_DESTINATION_BRANCH HEAD -- ':(exclude)**/layouts/**' ':(exclude)**/reports/**' ':(exclude)**/email/**' ':(exclude)**/*.email-meta.xml' ':(exclude)**/experiences/**/*.json')
                            - IFS=$'\n'
                            - |
                                for FILE in $CHANGED_FILES;
                                do
                                    npx prettier --list-different "$FILE"
                                done
                            - unset IFS
                  - step:
                        name: Verify linting
                        script:
                            - CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r origin/$BITBUCKET_PR_DESTINATION_BRANCH HEAD -- **/{aura,lwc}/**/*.js)
                            - IFS=$'\n'
                            - |
                                for FILE in $CHANGED_FILES;
                                do
                                    npx eslint "$FILE"
                                done
                            - unset IFS
                        condition:
                            changesets:
                                includePaths:
                                    - '**/aura/**'
                                    - '**/lwc/**'
                  - step:
                        name: Verify PMD
                        script:
                            - CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r origin/$BITBUCKET_PR_DESTINATION_BRANCH HEAD)
                            - CHANGED_FILES=$(echo $CHANGED_FILES | tr -s '[:blank:]' ',')
                            - sfdx scanner:run --pmdconfig config/pmd-ruleset.xml --target $CHANGED_FILES,!frameworks/**/*.cls --engine pmd --severity-threshold 3 --format table
                        condition:
                            changesets:
                                includePaths:
                                    - 'force-app/**'
            - parallel:
                  - step:
                        name: Deltas validation deployment
                        # deployment: # CICD # UAT # PRODUCTION
                        script:
                            - DESTINATION_ENVIRONMENT=$(if [ "$BITBUCKET_PR_DESTINATION_BRANCH" = "main" ]; then echo "CICD"; elif [[ "$BITBUCKET_PR_DESTINATION_BRANCH" =~ ^rc/[0-9].[0-9].[0-9]$ ]]; then echo "UAT"; elif [[ "$BITBUCKET_PR_DESTINATION_BRANCH" =~ ^patch/[0-9].[0-9].[0-9]$ ]]; then echo "PRODUCTION"; fi)
                            - pull_request_response=$(curl -X GET -H "Authorization:Bearer $PIPELINE_ACCESS_TOKEN" --url https://api.bitbucket.org/2.0/repositories/$BITBUCKET_REPO_FULL_NAME/pullrequests/$BITBUCKET_PR_ID)
                            - echo $pull_request_response > pull_request.json
                            - description=$(jq '.description' pull_request.json)
                            - RUN_TEST_PARAMETER=$(awk -F 'Tests:' '{print $2}' <<< "$description" | tr -d '"')
                            # Consider hardcoding RunLocalTest for safety, but do not execute tests if changes only contains flexipages/layouts/VF/Aura/LWC/experience builder
                            - bash /deploy.sh $DESTINATION_ENVIRONMENT origin/$BITBUCKET_PR_DESTINATION_BRANCH true $RUN_TEST_PARAMETER
                        condition:
                            changesets:
                                includePaths:
                                    - 'force-app/**'
                        artifacts:
                            - results.json
                        after-script:
                            - cat results.json
            - step:
                  name: Verify test coverage
                  script:
                      - NON_TEST_CLASSES=$((egrep -wrliL '@IsTest|public interface' deltas --include \*.cls || echo "") | xargs -rL 1 basename | sed 's/.cls//g' | paste -sd "," -)
                      - |
                          if [ $NON_TEST_CLASSES ]; then
                              sfdx nps:coverage:verify --path results.json --required-coverage 90 --classes $NON_TEST_CLASSES
                          fi
                  condition:
                      changesets:
                          includePaths:
                              - 'force-app/**'
    branches:
        feature/with-docker-for-bitbucket:
            - parallel:
                  - step:
                        name: Deploy CICD
                        deployment: CICD
                        script:
                            - source .env.replacements # TODO: test if it works properly
                            - bash /deploy.sh CICD $CICD_LAST_DEPLOYMENT_COMMIT_SHA false NoTestRun
                            - curl -X PUT -H "Authorization:Bearer $PIPELINE_ACCESS_TOKEN" --url https://api.bitbucket.org/2.0/repositories/$BITBUCKET_REPO_FULL_NAME/pipelines_config/variables/%7BCICD_LAST_DEPLOYMENT_COMMIT_SHA_UUID%7D -H 'Content-Type:application/json' -d "{\"key\":\"CICD_LAST_DEPLOYMENT_COMMIT_SHA\", \"value\":\"$BITBUCKET_COMMIT\"}"
                        condition:
                            changesets:
                                includePaths:
                                    - 'force-app/**'
                  # TODO: add QA and lower environments

        rc/*:
            - step:
                  name: Deploy UAT
                  deployment: UAT
                  script:
                      - source .env.replacements # TODO: test if it works properly
                      - bash /deploy.sh UAT $UAT_LAST_DEPLOYMENT_COMMIT_SHA false NoTestRun
                      - curl -X PUT -H "Authorization:Bearer $PIPELINE_ACCESS_TOKEN" --url https://api.bitbucket.org/2.0/repositories/$BITBUCKET_REPO_FULL_NAME/pipelines_config/variables/%7B$UAT_LAST_DEPLOYMENT_COMMIT_SHA_UUID%7D -H 'Content-Type:application/json' -d "{\"key\":\"UAT_LAST_DEPLOYMENT_COMMIT_SHA\", \"value\":\"$BITBUCKET_COMMIT\"}"
                  condition:
                      changesets:
                          includePaths:
                              - 'force-app/**'
    custom:
        scheduled-validation-deployments:
            - parallel:
                  - step:
                        name: Daily validation deployment with tests
                        deployment: CICD
                        script:
                            - bash /validation-with-tests.sh CICD
                  # TODO: add QA, UAT, PRODUCTION and HOTFIX environments
        manual-deployment:
            - variables:
                  - name: DESTINATION_ENVIRONMENT
                    allowed-values:
                        - 'CICD'
                        - 'QA'
                        - 'UAT'
                        - 'PRODUCTION'
                    default: 'CICD'
                  - name: checkonly
                  - name: testlevel
                    allowed-values:
                        - 'NoTestRun'
                        - 'RunSpecifiedTests'
                        - 'RunLocalTests'
                        - 'RunAllTestsInOrg'
                    default: 'RunLocalTests'
                  - name: runtests
            - step:
                  name: Deploy
                  script:
                      - source .env.replacements # TODO: test if it works properly
                      - LAST_DEPLOYMENT_COMMIT_SHA=$(eval echo \${${DESTINATION_ENVIRONMENT}_LAST_DEPLOYMENT_COMMIT_SHA})
                      - bash /deploy.sh $DESTINATION_ENVIRONMENT $LAST_DEPLOYMENT_COMMIT_SHA $checkonly $testlevel $runtests
            - step:
                  name: Update LAST_DEPLOYMENT_COMMIT_SHA
                  script:
                      - |
                          if [ ! $VALIDATION_PARAMETER ]; then
                              TARGET_VARIABLE_ID=$(eval echo \${${DESTINATION_ENVIRONMENT}_LAST_DEPLOYMENT_COMMIT_SHA_UUID})
                              TARGET_VARIABLE="${DESTINATION_ENVIRONMENT}_LAST_DEPLOYMENT_COMMIT_SHA"
                              curl -X PUT -H "Authorization:Bearer $PIPELINE_ACCESS_TOKEN" --url https://api.bitbucket.org/2.0/repositories/$BITBUCKET_REPO_FULL_NAME/pipelines_config/variables/%7B$TARGET_VARIABLE_ID%7D -H 'Content-Type:application/json' -d "{\"key\":\"$TARGET_VARIABLE\", \"value\":\"$BITBUCKET_COMMIT\"}"
                          fi
