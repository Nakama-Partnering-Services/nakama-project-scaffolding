name: Validate deployment

on:
    workflow_call:
        inputs:
            DESTINATION_ENVIRONMENT:
                required: true
                type: string

jobs:
    validation-deployment:
        name: 'Validation deployment'
        runs-on: ubuntu-latest
        container:
            image: nakamapartneringservices/nakama-pipelines
            credentials:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_PASSWORD }}
        environment: ${{ inputs.DESTINATION_ENVIRONMENT }}
        concurrency:
            group: ${{ inputs.DESTINATION_ENVIRONMENT }}-${{ github.ref }}
            cancel-in-progress: true
        steps:
            - uses: actions/checkout@v3

            - name: 'Load .env.replacements'
              uses: xom9ikk/dotenv@v2
              with:
                  path: ./
                  mode: replacements

            # Consider hardcoding RunLocalTest for safety, but do not execute tests if changes only contains flexipages/layouts/VF/Aura/LWC/experience builder
            - name: 'Get deltas and deploy'
              env:
                  SFDX_AUTH_URL: ${{ inputs.DESTINATION_ENVIRONMENT }}_SFDX_AUTH_URL
              # Note: shell: bash is needed especifically due to usage of redirection <<< not allowed in basic shell
              shell: bash
              run: |
                  export HOME=/root
                  git config --global --add safe.directory ${{ secrets.GIT_SAFE_DIRECTORY }}
                  git fetch origin $GITHUB_BASE_REF
                  RUN_TEST_PARAMETER=$(awk -F 'Tests:' '{print $2}' <<< "${{ github.event.pull_request.body }}" | tr -d '"')
                  echo ${{ secrets[env.SFDX_AUTH_URL] }} > ./DESTINATION_SFDX_AUTH_URL.txt
                  sfdx auth:sfdxurl:store --sfdxurlfile ./DESTINATION_SFDX_AUTH_URL.txt --setdefaultusername
                  bash /deploy.sh ${{ inputs.DESTINATION_ENVIRONMENT }} origin/$GITHUB_BASE_REF true $RUN_TEST_PARAMETER

            - name: 'Print results'
              if: always()
              run: cat results.json

            - name: 'Verify test coverage'
              run: |
                  NON_TEST_CLASSES=$( (egrep -wrliL '@IsTest|public interface' deltas --include \*.cls || echo "") | xargs -rL 1 basename | sed 's/.cls//g' | paste -sd "," -)
                  if [ $NON_TEST_CLASSES ]; then
                    sfdx nps:coverage:verify --path results.json --required-coverage 90 --classes $NON_TEST_CLASSES
                  fi
