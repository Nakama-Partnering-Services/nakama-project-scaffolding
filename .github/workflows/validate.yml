name: Validate pull request
on:
    pull_request:
        branches:
            - main
            - rc/**
            - patch/**
        paths:
            - sfdx-source/**

# Note: if the same branch has differente PR open to get itself merged into different targes, each PR triggering a validation,
# the reference of valid checks will be messed and all of them will just point to the last validation check

# Note: secrets can not be used to conditionally run jobs: https://github.com/actions/runner/issues/520
jobs:
    verify-formatting:
        name: 'Verify formatting'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - name: 'Restore node_modules cache'
              id: cache-npm
              uses: actions/cache@v2
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-

            - name: 'Install npm dependencies'
              if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
              run: npm ci

            - name: 'Verify formatting'
              run: |
                  PR_BODY="${{ github.event.pull_request.body }}"
                  echo "$PR_BODY"
                  RUN_TEST_PARAMETER=$(awk -F 'Tests:' '{print $2}' <<< "${{ github.event.pull_request.body }}" | tr -d '"')
                  echo "$RUN_TEST_PARAMETER"
                  git fetch origin $GITHUB_BASE_REF
                  CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r origin/$GITHUB_BASE_REF HEAD -- ':(exclude)**/reports/**' ':(exclude)**/email/**' ':(exclude)**/*.email-meta.xml')
                  IFS=$'\n'
                  for FILE in $CHANGED_FILES;
                  do
                      npx prettier --list-different "$FILE"
                  done
                  unset IFS

    verify-linting:
        name: 'Verify linting'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - name: 'Restore node_modules cache'
              id: cache-npm
              uses: actions/cache@v2
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-

            - name: 'Install npm dependencies'
              if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
              run: npm ci

            - name: 'Verify linting'
              run: |
                  git fetch origin $GITHUB_BASE_REF
                  CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r origin/$GITHUB_BASE_REF HEAD -- **/{aura,lwc}/**/*.js)
                  npx eslint $CHANGED_FILES --format junit --output-file=junit-reports/TEST-eslint.xml
                  IFS=$'\n'
                  for FILE in $CHANGED_FILES;
                      do
                          npx eslint "$FILE"
                      done
                  unset IFS

              # TODO: consider reporting with sarif as well, using sfdx-scanner instead or @microsoft/eslint-formatter-sarif
            - name: Publish Test Report
              if: always()
              uses: mikepenz/action-junit-report@v3

    verify-pmd:
        name: 'Verify PMD'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - name: 'Verify PMD'
              run: |
                  git fetch origin $GITHUB_BASE_REF
                  CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r origin/$GITHUB_BASE_REF HEAD)
                  CHANGED_FILES=$(echo $CHANGED_FILES | tr -s '[:blank:]' ',')
                  npm install sfdx-cli --global
                  sfdx plugins:install @salesforce/sfdx-scanner
                  sfdx scanner:run --pmdconfig config/pmd-ruleset.xml --target $CHANGED_FILES,!frameworks/**/*.cls --engine pmd --severity-threshold 3 --format sarif --outfile apexScanResults.sarif

            # TODO: consider reporting with junit as well
            - name: Upload SARIF file
              if: always()
              uses: github/codeql-action/upload-sarif@v2
              with:
                  sarif_file: apexScanResults.sarif

    devint-validation-deployment:
        name: 'DEVINT validation deployment'
        uses: ./.github/workflows/validate-deployment.yml
        needs: [verify-formatting, verify-linting, verify-pmd]
        if: ${{ github.base_ref == 'main' }}
        with:
            DESTINATION_ENVIRONMENT: DEVINT
        secrets: inherit

    staging-validation-deployment:
        name: 'STAGING validation deployment'
        uses: ./.github/workflows/validate-deployment.yml
        needs: [verify-formatting, verify-linting, verify-pmd]
        if: ${{ startsWith( github.base_ref, 'rc/' ) }}
        with:
            DESTINATION_ENVIRONMENT: STAGING
        secrets: inherit

    production-validation-deployment:
        name: 'PRODUCTION validation deployment'
        uses: ./.github/workflows/validate-deployment.yml
        needs: [verify-formatting, verify-linting, verify-pmd]
        if: ${{ startsWith( github.base_ref, 'patch/' ) }}
        with:
            DESTINATION_ENVIRONMENT: PRODUCTION
        secrets: inherit

    scratch-org-validations:
        name: 'Execute scratch org validations'
        needs: [verify-formatting, verify-linting, verify-pmd]
        runs-on: ubuntu-latest
        container:
            # Warning: when running in container, git commands will not work since it will not be a repository
            image: docker://salesforce/salesforcedx:latest-full
        steps:
            - uses: actions/checkout@v2

            - name: 'Create Dev Hub auth file'
              run: echo ${{ secrets.DEVHUB_SFDX_AUTH_URL }} > ./DEVHUB_SFDX_AUTH_URL.txt

            - name: 'Authorize Dev Hub'
              run: sfdx auth:sfdxurl:store --sfdxurlfile ./DEVHUB_SFDX_AUTH_URL.txt --setdefaultdevhubusername

            - name: 'Remove Dev Hub auth file'
              run: rm --force ./DEVHUB_SFDX_AUTH_URL.txt

            - name: 'Create scratch org'
              continue-on-error: true
              run: |
                  sfdx force:org:create --definitionfile config/project-scratch-def.json --setdefaultusername --durationdays 1
                  npm install fast-xml-parser
                  node scripts/node/environment-replacements/main.js || true
                  cp --recursive specific-environments/scratch-org/. sfdx-source/ || true

            # Note: replace previous step with this one if scratch org pool is needed
            # - name: 'Fetch scratch org'
            #   run: |
            #       echo 'y' | sfdx plugins:install sfpowerkit
            #       sfdx sfpowerkit:pool:fetch --tag base --setdefaultusername
            #       npm install fast-xml-parser
            #       node scripts/node/environment-replacements/main.js || true
            #       cp --recursive specific-environments/scratch-org/. sfdx-source/ || true

            # Note: This also pushes metadata in frameworks folder, useful to check and prevent circular dependancies between packages
            - name: 'Push source to scratch org'
              continue-on-error: true
              run: sfdx force:source:push # if this fails due to limitations, change to run scripts/shell/deploy-packages.sh instead


            # Note: redundant and error prone due to running frameworks and project tests together, until this issue is fixed: https://trailblazer.salesforce.com/issues_view?id=a1p4V000002JRzNQAW
            # - name: 'Run local tests'
            #   run: sfdx force:apex:test:run --testlevel RunLocalTests --synchronous --resultformat human --loglevel error
