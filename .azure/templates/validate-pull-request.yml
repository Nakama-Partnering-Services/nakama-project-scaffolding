# Note: validations always calculate differences against target branch.
# In order to ensure that there are no differences that does not really belong to PR,
# the target branch should always be rebased before opening a PR, and everytime the build is expired
# due to the target branch being updated. Unfortunately, there is no way to enforce that in Azure.

stages:
    # Note: git diff command for jobs requires config:
    # Pipelines > your pipeline > edit > triggers (submenu) > YAML tab > Get Sources > Shallow fetch -> DISABLED
    - stage: generate_deltas
      displayName: 'Generate deltas'
      jobs:
          - job: 'Generate_deltas'
            container:
                image: nakamapartneringservices/nakama-pipelines
                endpoint: DockerHubNakama
            steps:
                - checkout: self
                  persistCredentials: true

                - script: sf nakama generate deltas
                  displayName: 'Generate deltas'

                - publish: deltas
                  displayName: 'Publish deltas'
                  artifact: deltas

                # Note: in order to download artifacts in other stages, instead of this shortcut, we will really use the full task, because it has the option to specify the location where to download the artifact.
                # - download: current
                #   artifact: deltas

    - stage: validate_pull_request
      displayName: 'Validate pull request'
      jobs:
          - job: 'Validate_Jest'
            container:
                image: nakamapartneringservices/nakama-pipelines
                endpoint: DockerHubNakama
            steps:
                - script: sf nakama validate jest
                  displayName: 'Validate Jest'

          - job: 'Validate_Prettier'
            container:
                image: nakamapartneringservices/nakama-pipelines
                endpoint: DockerHubNakama
            steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                      artifactName: deltas
                      targetPath: $(Build.Repository.LocalPath)/deltas

                - script: sf nakama validate prettier
                  displayName: 'Validate Prettier'

          - job: 'Validate_ESLint_LWC'
            container:
                image: nakamapartneringservices/nakama-pipelines
                endpoint: DockerHubNakama
            steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                      artifactName: deltas
                      targetPath: $(Build.Repository.LocalPath)/deltas

                - script: sf nakama validate eslint -f lwc
                  displayName: 'Validate ESLint LWC'

          - job: 'Validate_ESLint_Aura'
            container:
                image: nakamapartneringservices/nakama-pipelines
                endpoint: DockerHubNakama
            steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                      artifactName: deltas
                      targetPath: $(Build.Repository.LocalPath)/deltas

                - script: sf nakama validate eslint -f aura
                  displayName: 'Validate ESLint Aura'

          - job: 'Validate_PMD'
            container:
                image: nakamapartneringservices/nakama-pipelines
                endpoint: DockerHubNakama
            steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                      artifactName: deltas
                      targetPath: $(Build.Repository.LocalPath)/deltas

                - script: sf nakama validate pmd
                  displayName: 'Validate PMD'

          - job: 'Validate_Flows'
            container:
                image: nakamapartneringservices/nakama-pipelines
                endpoint: DockerHubNakama
            steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                      artifactName: deltas
                      targetPath: $(Build.Repository.LocalPath)/deltas

                - script: sf nakama validate flows
                  displayName: 'Validate Flows'

          - job: 'Validate_Deployment'
            container:
                image: nakamapartneringservices/nakama-pipelines
                endpoint: DockerHubNakama
            steps:
                # bash may be needed in some jobs here, instead of script
                # Note: TARGET_ORG and TARGET_BRANCH can not be assigned before because System.PullRequest.TargetBranch is not available in templates
                - script: |
                      if [ "$SYSTEM_PULLREQUEST_TARGETBRANCH" = "refs/heads/main" ]; then
                          TARGET_ORG="INT"
                      elif [[ "$SYSTEM_PULLREQUEST_TARGETBRANCH" =~ ^refs/heads/rc/[0-9]?[0-9].[0-9]?[0-9].*$ ]]; then
                          TARGET_ORG="UAT"
                      fi
                      echo "##vso[task.setvariable variable=TARGET_ORG]$TARGET_ORG"
                  displayName: 'Get deployment target org'

                # Note: deltas need to exist already before trying to run 'sf nakama decide test level'
                - task: DownloadPipelineArtifact@2
                  inputs:
                      artifactName: deltas
                      targetPath: $(Build.Repository.LocalPath)/deltas

                - script: |
                      URL="${SYSTEM_TEAMFOUNDATIONCOLLECTIONURI}${SYSTEM_TEAMPROJECTID}/_apis/git/pullrequests/${SYSTEM_PULLREQUEST_PULLREQUESTID}?api-version=5.1"
                      PULL_REQUEST_BODY=$(curl -X GET $URL -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" -H "Content-Type: application/json" | jq '.description')
                      echo "PULL_REQUEST_BODY: $PULL_REQUEST_BODY"
                      TESTS_SPECIFICATION=$(awk -F 'Tests:' '{print $2}' <<< "$PULL_REQUEST_BODY" | tr -d '"')
                      if [ -z "$TESTS_SPECIFICATION" ]; then
                          TESTS_SPECIFICATION=$(sf nakama decide test level)
                          echo "TEST LEVEL: $TESTS_SPECIFICATION"
                      fi
                      TESTS_SPECIFICATION_ARRAY=($TESTS_SPECIFICATION)
                      TEST_LEVEL=${TESTS_SPECIFICATION_ARRAY[0]}
                      TESTS=${TESTS_SPECIFICATION_ARRAY[1]}
                      echo "##vso[task.setvariable variable=TEST_LEVEL]$TEST_LEVEL"
                      echo "##vso[task.setvariable variable=TESTS]$TESTS"
                  displayName: 'Get deployment tests specifications'
                  # Secret variables need to be declared here to be mapped
                  env:
                      SYSTEM_ACCESSTOKEN: $(System.AccessToken)

                - template: deploy.yml
                  parameters:
                      TARGET_ORG: $(TARGET_ORG)
                      USE_MOST_RECENT: false
                      DRY_RUN: true
                      TEST_LEVEL: $(TEST_LEVEL)
                      TESTS: $(TESTS)

                - publish: results.json
                  displayName: 'Publish results'
                  artifact: results

    - stage: validate_test_coverage
      displayName: 'Validate test coverage'
      jobs:
          - job: 'Validate_test_coverage'
            container:
                image: nakamapartneringservices/nakama-pipelines
                endpoint: DockerHubNakama
            steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                      artifactName: deltas
                      targetPath: $(Build.Repository.LocalPath)/deltas

                - task: DownloadPipelineArtifact@2
                  inputs:
                      artifactName: results
                      targetPath: $(Build.Repository.LocalPath)

                - script: sf nakama validate coverage -r 85
                  displayName: 'Validate test coverage'
