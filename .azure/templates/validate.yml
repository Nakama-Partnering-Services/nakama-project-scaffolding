# NOTE: validations always calculate differences against target branch.
# in order to ensure that you dont see any difference that does not belong to you own changes,
# you should rebase the target branch before opening a PR, and everytime your build is expired
# due to the target branch being updated. Unfortunately, there is no way to enforce that in Azure

stages:
    - stage: local_validations
      displayName: 'Local Validations'
      jobs:
          # TODO:  Use cache/artifacts for node_modules
          - job: 'Verify_formatting'
            steps:
                - script: npm ci
                  displayName: 'Install npm dependencies'

                - bash: |
                      set -e
                      TARGET_BRANCH=${TARGET_BRANCH_REF/$DELETE}
                      CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r origin/$TARGET_BRANCH HEAD -- ':(exclude)**/reports/**' ':(exclude)**/email/**' ':(exclude)**/*.email-meta.xml')
                      IFS=$'\n'
                      for FILE in $CHANGED_FILES;
                      do
                          npx prettier --list-different "$FILE"
                      done
                      unset IFS
                  displayName: 'Verify formatting'

          - job: 'Verify_linting'
            steps:
                - script: npm ci
                  displayName: 'Install npm dependencies'

                - bash: |
                      set -e
                      TARGET_BRANCH=${TARGET_BRANCH_REF/$DELETE}
                      CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r origin/$TARGET_BRANCH HEAD -- **/{aura,lwc}/**)
                      IFS=$'\n'
                      for FILE in $CHANGED_FILES;
                      do
                          npx eslint "$FILE"
                      done
                      unset IFS
                  displayName: 'Verify linting'

          - job: 'Verify_PMD'
            container: salesforce/salesforcedx:latest-full
            steps:
                - script: |
                      TARGET_BRANCH=${TARGET_BRANCH_REF/$DELETE}
                      CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r origin/$TARGET_BRANCH HEAD)
                      CHANGED_FILES=$(echo $CHANGED_FILES | tr -s '[:blank:]' ',')
                      sfdx plugins:install @salesforce/sfdx-scanner
                      sfdx scanner:run --pmdconfig config/pmd-ruleset.xml --target $CHANGED_FILES,!frameworks/**/*.cls,!sfdx-source/**/*.trigger --engine pmd --severity-threshold 3 --format table
                  displayName: 'Verify PMD'

    - stage: org_validations
      dependsOn: local_validations
      condition: succeeded()
      displayName: 'Org validations'
      jobs:
          - job: 'Validation_deployment'
            container: salesforce/salesforcedx:latest-full
            steps:
                # Note: DESTINATION_ENVIRONMENT and TARGET_BRANCH can not be assigned before because System.PullRequest.TargetBranch is not available in templates
                - script: |
                      TARGET_BRANCH=${TARGET_BRANCH_REF/$DELETE}
                      DESTINATION_ENVIRONMENT=$(if [ "$TARGET_BRANCH" = "main" ]; then echo "DEVINT"; elif [[ "$TARGET_BRANCH" =~ ^rc/[0-9].[0-9].[0-9]$ ]]; then echo "STAGING"; elif [[ "$TARGET_BRANCH" =~ ^patch/[0-9].[0-9].[0-9]$ ]]; then echo "PRODUCTION"; fi)
                      sf plugins install sfdx-git-delta
                      mkdir deltas
                      sf sgd source delta --source sfdx-source --from origin/$TARGET_BRANCH --to HEAD --output deltas --ignore .forceignore --generate-delta
                      npm install fast-xml-parser
                      node scripts/node/environment-replacements/main.js || true
                      FOLDER=${DESTINATION_ENVIRONMENT,,}
                      cp --recursive specific-environments/$FOLDER/. sfdx-source/ || true
                      sf plugins install nakama-plugin-sfdx
                      sf nps package destructive versionobsoleteflows --path deltas/destructiveChanges/destructiveChanges.xml
                      DESTINATION_SFDX_AUTH_URL=$(eval echo \${${DESTINATION_ENVIRONMENT}_SFDX_AUTH_URL})
                      echo $DESTINATION_SFDX_AUTH_URL > ./DESTINATION_SFDX_AUTH_URL.txt
                      sfdx auth:sfdxurl:store --sfdxurlfile ./DESTINATION_SFDX_AUTH_URL.txt --setdefaultusername
                      sfdx force:source:deploy --wait 60 --checkonly --manifest deltas/package/package.xml --postdestructivechanges deltas/destructiveChanges/destructiveChanges.xml --verbose --testlevel RunLocalTests --json > results.json
                      cat results.json
                      NON_TEST_CLASSES=$((egrep -wrliL @IsTest deltas --include \*.cls || echo "") | xargs -rL 1 basename | sed 's/.cls//g' | paste -sd "," -)
                      if [ $NON_TEST_CLASSES ]; then
                        sfdx nps:coverage:verify --path results.json --required-coverage 90 --classes $NON_TEST_CLASSES
                      fi
                  displayName: 'Validation deployment'
                  # Secret variables need to be declared here to be mapped
                  env:
                      DEVINT_SFDX_AUTH_URL: $(DEVINT_SFDX_AUTH_URL)
                      # STAGING_SFDX_AUTH_URL: $(STAGING_SFDX_AUTH_URL)
                      # PRODUCTION_SFDX_AUTH_URL: $(PRODUCTION_SFDX_AUTH_URL)
