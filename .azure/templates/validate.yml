# NOTE: validations always calculate differences against target branch.
# in order to ensure that you dont see any difference that does not belong to you own changes,
# you should rebase the target branch before opening a PR, and everytime your build is expired
# due to the target branch being updated. Unfortunately, there is no way to enforce that in Azure

stages:
    # Note: git diff command for jobs in this stage requires config:
    # Pipelines > your pipeline > edit > triggers (submenu) > YAML tab > Get Sources > Shallow fetch -> DISABLED
    - stage: local_validations
      displayName: 'Local Validations'
      jobs:
          # TODO:  Use cache/artifacts for node_modules
          - job: 'Verify_formatting'
            steps:
                - script: npm ci
                  displayName: 'Install npm dependencies'

                - bash: |
                      set -e
                      TARGET_BRANCH=${TARGET_BRANCH_REF/$DELETE}
                      CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r origin/$TARGET_BRANCH HEAD -- ':(exclude)**/reports/**' ':(exclude)**/email/**' ':(exclude)**/*.email-meta.xml' ':(exclude)**/experiences/**/*.json')
                      IFS=$'\n'
                      for FILE in $CHANGED_FILES;
                      do
                          npx prettier --list-different "$FILE"
                      done
                      unset IFS
                  displayName: 'Verify formatting'

          - job: 'Verify_linting'
            steps:
                - script: npm ci
                  displayName: 'Install npm dependencies'

                - bash: |
                      set -e
                      TARGET_BRANCH=${TARGET_BRANCH_REF/$DELETE}
                      CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r origin/$TARGET_BRANCH HEAD -- **/{aura,lwc}/**/*.js)
                      IFS=$'\n'
                      for FILE in $CHANGED_FILES;
                      do
                          npx eslint "$FILE"
                      done
                      unset IFS
                  displayName: 'Verify linting'

          - job: 'Verify_PMD'
            container: salesforce/salesforcedx:latest-full
            steps:
                - script: |
                      TARGET_BRANCH=${TARGET_BRANCH_REF/$DELETE}
                      CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r origin/$TARGET_BRANCH HEAD)
                      CHANGED_FILES=$(echo $CHANGED_FILES | tr -s '[:blank:]' ',')
                      sfdx plugins:install @salesforce/sfdx-scanner
                      sfdx scanner:run --pmdconfig config/pmd-ruleset.xml --target $CHANGED_FILES,!frameworks/**/*.cls,!sfdx-source/**/*.trigger --engine pmd --severity-threshold 3 --format table
                  displayName: 'Verify PMD'

    - stage: org_validations
      dependsOn: local_validations
      condition: succeeded()
      displayName: 'Org validations'
      jobs:
          - job: 'Validation_deployment'
            container: salesforce/salesforcedx:latest-full
            steps:
                # Note: TARGET_ENVIRONMENT and TARGET_BRANCH can not be assigned before because System.PullRequest.TargetBranch is not available in templates
                - script: |
                      set -e
                      TARGET_BRANCH=${TARGET_BRANCH_REF/$DELETE}
                      TARGET_ENVIRONMENT=$(if [ "$TARGET_BRANCH" = "main" ]; then echo "CICD"; elif [[ "$TARGET_BRANCH" =~ ^rc/[0-9]?[0-9].[0-9]?[0-9].*$ ]]; then echo "UAT"; elif [[ "$TARGET_BRANCH" =~ ^patch/[0-9]?[0-9].[0-9]?[0-9].*$ ]]; then echo "PRODUCTION"; fi)
                      url="${SYSTEM_TEAMFOUNDATIONCOLLECTIONURI}${SYSTEM_TEAMPROJECTID}/_apis/git/pullrequests/${SYSTEM_PULLREQUEST_PULLREQUESTID}?api-version=5.1"
                      pull_request_response=$(curl -X GET $url -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" -H "Content-Type: application/json")
                      echo $pull_request_response > pull_request.json
                      description=$(jq '.description' pull_request.json)
                      RUN_TEST_PARAMETER=$(awk -F 'Tests:' '{print $2}' <<< "$description" | tr -d '"')
                      # Consider hardcoding RunLocalTest for safety, but do not execute tests if changes only contains flexipages/layouts/VF/Aura/LWC/experience builder
                      curl -H "Authorization:token $NAKAMA_ACCESS_TOKEN" -H 'Accept:application/vnd.github.VERSION.raw' https://raw.githubusercontent.com/Nakama-Partnering-Services/nakama-project-scaffolding/main/scripts/shell/pipelines/deploy.sh > ./deploy.sh
                      chmod +x ./deploy.sh
                      ./deploy.sh $TARGET_ENVIRONMENT origin/$TARGET_BRANCH true $RUN_TEST_PARAMETER
                  displayName: 'Validation deployment'
                  # Secret variables need to be declared here to be mapped
                  env:
                      NAKAMA_ACCESS_TOKEN: $(NAKAMA_ACCESS_TOKEN)
                      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
                      CICD_SFDX_AUTH_URL: $(CICD_SFDX_AUTH_URL)
                      # UAT_SFDX_AUTH_URL: $(UAT_SFDX_AUTH_URL)
                      # PRODUCTION_SFDX_AUTH_URL: $(PRODUCTION_SFDX_AUTH_URL)
                - script: cat results.json
                  displayName: 'Print results'
                  condition: always()
                - script: |
                      NON_TEST_CLASSES=$( (egrep -wrliL '@IsTest|public interface' deltas --include \*.cls || echo "") | xargs -rL 1 basename | sed 's/.cls//g' | paste -sd "," -)
                      if [ $NON_TEST_CLASSES ]; then
                        sfdx nps:coverage:verify --path results.json --required-coverage 90 --classes $NON_TEST_CLASSES
                      fi
                  displayName: 'Verify test coverage'
