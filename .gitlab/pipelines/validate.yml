# default:
#    cache:
#     key: ${CI_COMMIT_REF_NAME}
#     paths:
#         - node_modules/
#         - .sfdx/

default:
    image: jdkgabri/nakama-pipelines-sh

.sfdx-changes:
    - force-app/**/main/**/*
    - force-app/**/test/classes/**/*

include:
    - template: Code-Quality.gitlab-ci.yml

code_quality:
    stage: generate-code_quality-report
    rules:
        - if: $CODE_QUALITY_DISABLED
          when: never
        - changes: !reference [.sfdx-changes]

verify-formatting:
    stage: local-validations
    rules:
        - if: $VERIFY_FORMATTING_DISABLED
          when: never
        - when: always
    script:
        - CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r $CI_MERGE_REQUEST_DIFF_BASE_SHA HEAD -- ':(exclude)**/reports/**' ':(exclude)**/email/**' ':(exclude)**/*.email-meta.xml' ':(exclude)**/experiences/**/*.json')
        - IFS=$'\n'
        - |
            for FILE in $CHANGED_FILES;
            do
                npx prettier --list-different "$FILE"
            done
        - unset IFS
        # Following approach fails when many files have changed and parameter list is too large
        # - CHANGED_FILES=$(echo $CHANGED_FILES | tr -s '[:blank:]' ',')
        # - NUMBER_OF_FILES=$(echo "$CHANGED_FILES" | tr ',' ' ' | wc -w)
        # - |
        #     if [ "$NUMBER_OF_FILES" -gt 1 ]; then
        #         npx prettier --list-different "{$CHANGED_FILES}"
        #     elif [ "$CHANGED_FILES" ]; then
        #         npx prettier --list-different "$CHANGED_FILES"
        #     fi

verify-linting:
    stage: local-validations
    rules:
        - if: $VERIFY_LINTING_DISABLED
          when: never
        - changes:
              - force-app/**/main/**/*.js
    script:
        - CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r $CI_MERGE_REQUEST_DIFF_BASE_SHA HEAD -- **/{aura,lwc}/**/*.js)
        - IFS=$'\n'
        - |
            for FILE in $CHANGED_FILES;
            do
                npx eslint "$FILE"
            done
        - unset IFS

verify-pmd:
    stage: local-validations
    needs: []
    rules:
        - if: $VERIFY_PMD_DISABLED
          when: never
        - changes: !reference [.sfdx-changes]
    script:
        - CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r $CI_MERGE_REQUEST_DIFF_BASE_SHA HEAD)
        - CHANGED_FILES=$(echo $CHANGED_FILES | tr -s '[:blank:]' ',')
        - sfdx scanner:run --pmdconfig config/pmd-ruleset.xml --target $CHANGED_FILES,!frameworks/**/*.cls --engine pmd --severity-threshold 3 --format table

deltas-validation-deployment:
    stage: org-validations
    rules:
        - if: $VALIDATION_DEPLOYMENT_DISABLED
          when: never
        - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
          changes: !reference [.sfdx-changes]
          variables:
              TARGET_ENVIRONMENT: 'CICD'
        - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^rc/
          changes: !reference [.sfdx-changes]
          variables:
              TARGET_ENVIRONMENT: 'STAGING'
        - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^patch/
          changes: !reference [.sfdx-changes]
          variables:
              TARGET_ENVIRONMENT: 'PRODUCTION'
    # Note: DESTINATION_ENVIRONMENT is renamed to TARGET_ENVIRONMENT so it does not conflict with variable declared in .gitlab-ci.yml
    environment: $TARGET_ENVIRONMENT
    resource_group: $TARGET_ENVIRONMENT
    script:
        - merge_request_response=$(curl --request GET --header "PRIVATE-TOKEN:$PIPELINE_ACCESS_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID")
        - echo $merge_request_response > merge_request.json
        - description=$(jq '.description' merge_request.json)
        - RUN_TEST_PARAMETER=$(awk -F 'Tests:' '{print $2}' <<< "$description" | tr -d '"')
        # Consider hardcoding RunLocalTest for safety, but do not execute tests if changes only contains flexipages/layouts/VF/Aura/LWC/experience builder
        - cat /nakama-pipelines/deploy.sh
        - chmod +x /nakama-pipelines/deploy.sh
        - sh /nakama-pipelines/deploy.sh $TARGET_ENVIRONMENT $CI_MERGE_REQUEST_DIFF_BASE_SHA true $RUN_TEST_PARAMETER
    artifacts:
        when: always
        paths:
            - results.json
            - test-results/
        reports:
            junit: test-results/junit/junit.xml # test report works, but only displayed in child dispatched pipeline, so no sumarry in MR overview appears. This is why MR validation is the only yml directly included instead of triggered and dispatched as a child
    # Also configurable in: project > Settings > CI/CD > Expand General pipelines, however that is deprecated
    # coverage: /name="testRunCoverage" value="([\d]+%)"/ not working since the --codecoverage flag can not be specified
    # and hence the testRunCoverage does not appear even if we print the junit.xml file in the job log.

print-results:
    stage: show-results
    rules:
        - if: $VALIDATION_DEPLOYMENT_DISABLED
          when: never
        - changes: !reference [.sfdx-changes]
          when: always
    script:
        - cat results.json

suggest-deployment-fixes:
    stage: show-results
    rules:
        - if: $VALIDATION_DEPLOYMENT_DISABLED || $SUGGEST_FIXES_DISABLED
          when: never
        - changes: !reference [.sfdx-changes]
          when: on_failure
    script:
        - node scripts/node/utilities/getDeploymentErrorsFeedback.js $OPENAI_API_KEY

identify-non-test-classes:
    stage: identify-non-test-classes
    rules:
        - if: $VALIDATION_DEPLOYMENT_DISABLED
          when: never
        - changes: !reference [.sfdx-changes]
    script:
        - NON_TEST_CLASSES=$( (egrep -wrliL '@IsTest|public interface' deltas --include \*.cls || echo "") | xargs -rL 1 basename | sed 's/.cls//g' | paste -sd "," -)
        - echo "NON_TEST_CLASSES=$NON_TEST_CLASSES" >> non_tests.env
    artifacts:
        reports:
            dotenv: non_tests.env

# Note: this job will always fail if no test classes were executed but will always work if RunLocalTest is hardcoded in validation deployment
verify-test-coverage:
    stage: verify-test-coverage
    rules:
        - if: $VALIDATION_DEPLOYMENT_DISABLED
          when: never
        - changes: !reference [.sfdx-changes]
    script:
        - echo 'y' | sfdx plugins:install nakama-plugin-sfdx
        - sfdx nps:coverage:formatters:mappaths -p test-results/coverage/cobertura.xml -t cobertura
        - |
            if [ $NON_TEST_CLASSES ]; then
                sfdx nps:coverage:verify --path results.json --required-coverage 85 --classes $NON_TEST_CLASSES
            fi
    artifacts:
        when: always
        paths:
            - test-results/coverage/cobertura.xml
        reports:
            coverage_report:
                coverage_format: cobertura
                path: test-results/coverage/cobertura.xml
