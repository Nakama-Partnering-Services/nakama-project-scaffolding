# cache:
#     key: ${CI_COMMIT_REF_NAME}
#     paths:
#         - node_modules/
#         - .sfdx/

image: salesforce/salesforcedx:latest-full

.sfdx-changes:
    - sfdx-source/**/main/**/*
    - sfdx-source/**/test/classes/**/*

.vlocity-changes:
    - sfdx-source/**/vlocity/**/*

# Moved to .gitlab-ci.yml to work with included yml rather than dispatched child pipeline
# stages:
#     - generate-code_quality-report
#     - install-npm
#     - local-validations
#     - generate-deltas
#     - org-validations
#     - identify-non-test-classes
#     - verify-test-coverage
#     - delete-scratch-org

include:
    - template: Code-Quality.gitlab-ci.yml

code_quality:
    stage: generate-code_quality-report
    rules:
        - if: $CODE_QUALITY_DISABLED
          when: never
        - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"
          changes: !reference [.sfdx-changes]

install-npm-dependancies:
    stage: install-npm
    rules:
        - if: $VERIFY_FORMATTING_DISABLED && $VERIFY_LINTING_DISABLED
          when: never
        # Note: always need to be specified since, default "success" is not reached due to previous parent triggering job being not completed as it follows a depend strategy
        - when: always
    script:
        - npm ci
    artifacts:
        paths:
            - node_modules

verify-formatting:
    stage: local-validations
    rules:
        - if: $VERIFY_FORMATTING_DISABLED
          when: never
        - when: always
    script:
        - CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r $CI_MERGE_REQUEST_DIFF_BASE_SHA HEAD -- ':(exclude)**/reports/**' ':(exclude)**/email/**')
        - IFS=$'\n'
        - |
            for FILE in $CHANGED_FILES;
            do
                npx prettier --list-different "$FILE"
            done
        - unset IFS
        # Following approach fails when many files have changed and parameter list is too large
        # - CHANGED_FILES=$(echo $CHANGED_FILES | tr -s '[:blank:]' ',')
        # - NUMBER_OF_FILES=$(echo "$CHANGED_FILES" | tr ',' ' ' | wc -w)
        # - |
        #     if [ "$NUMBER_OF_FILES" -gt 1 ]; then
        #         npx prettier --list-different "{$CHANGED_FILES}"
        #     elif [ "$CHANGED_FILES" ]; then
        #         npx prettier --list-different "$CHANGED_FILES"
        #     fi

verify-linting:
    stage: local-validations
    rules:
        - if: $VERIFY_LINTING_DISABLED
          when: never
        - changes:
              - sfdx-source/**/main/**/*.js
    script:
        - CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r $CI_MERGE_REQUEST_DIFF_BASE_SHA HEAD -- **/{aura,lwc}/**)
        - npx eslint $CHANGED_FILES
        # - IFS=$'\n'
        # - |
        #     for FILE in $CHANGED_FILES;
        #     do
        #         npx eslint "$FILE"
        #     done
        # - unset IFS

verify-pmd:
    stage: local-validations
    needs: []
    rules:
        - if: $VERIFY_PMD_DISABLED
          when: never
        - changes: !reference [.sfdx-changes]
    script:
        - CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r $CI_MERGE_REQUEST_DIFF_BASE_SHA HEAD)
        - CHANGED_FILES=$(echo $CHANGED_FILES | tr -s '[:blank:]' ',')
        - sf plugins install @salesforce/sfdx-scanner
        - sf scanner run --pmdconfig config/pmd-ruleset.xml --target $CHANGED_FILES,!frameworks/**/*.cls --engine pmd --severity-threshold 3 --format table

generate-deltas:
    stage: generate-deltas
    rules:
        - if: $VALIDATION_DEPLOYMENT_DISABLED
          when: never
        - changes: !reference [.sfdx-changes]
    script:
        - sf plugins install sfdx-git-delta
        - mkdir deltas
        - sf sgd source delta --source sfdx-source --from $CI_MERGE_REQUEST_DIFF_BASE_SHA --to HEAD --output deltas --ignore .forceignore --generate-delta
    artifacts:
        paths:
            - deltas

deltas-validation-deployment:
    stage: org-validations
    rules:
        - if: $VALIDATION_DEPLOYMENT_DISABLED
          when: never
        - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
          changes: !reference [.sfdx-changes]
          variables:
              TARGET_ENVIRONMENT: 'devint'
        - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^release/
          changes: !reference [.sfdx-changes]
          variables:
              TARGET_ENVIRONMENT: 'staging'
    # Note: DESTINATION_ENVIRONMENT is renamed to TARGET_ENVIRONMENT so it does not conflict with variable declared in .gitlab-ci.yml
    environment: $TARGET_ENVIRONMENT
    resource_group: $TARGET_ENVIRONMENT
    script:
        - TARGET_SFDX_AUTH_URL=$(eval echo \${${TARGET_ENVIRONMENT^^}_SFDX_AUTH_URL})
        - sfdx auth:sfdxurl:store --sfdxurlfile $TARGET_SFDX_AUTH_URL --setdefaultusername
        - npm install fast-xml-parser
        - node scripts/node/environment-replacements/main.js || true
        - cp --recursive specific-environments/$TARGET_ENVIRONMENT/. sfdx-source/ || true
        - sf plugins install nakama-plugin-sfdx
        - sf nps package destructive versionobsoleteflows --path deltas/destructiveChanges/destructiveChanges.xml
        # - RUN_TEST_PARAMETER=$(if [ $TEST_CLASSES ]; then echo "--testlevel RunSpecifiedTests --runtests $TEST_CLASSES"; else echo ""; fi)
        - sfdx force:source:deploy --wait 60 --checkonly --manifest deltas/package/package.xml --postdestructivechanges deltas/destructiveChanges/destructiveChanges.xml --verbose --testlevel RunLocalTests --junit --coverageformatters cobertura --resultsdir test-results --json > results.json
    artifacts:
        when: always
        paths:
            - results.json
            - test-results/
        reports:
            junit: test-results/junit/junit.xml # test report works, but only displayed in child dispatched pipeline, so no sumarry in MR overview appears in parent
    # Also configurable in: project > Settings > CI/CD > Expand General pipelines, however that is deprecated
    # coverage: /name="testRunCoverage" value="([\d]+%)"/ not working since because the --codecoverage flag can not be specified
    # and hence the testRunCoverage does not appear even if we print the junit.xml file in the job log.

print-deployment-result:
    stage: org-validations
    needs: [deltas-validation-deployment]
    rules:
        - if: $VALIDATION_DEPLOYMENT_DISABLED
          when: never
        - changes: !reference [.sfdx-changes]
          when: always
    script:
        - cat results.json

identify-non-test-classes:
    stage: identify-non-test-classes
    rules:
        - if: $VALIDATION_DEPLOYMENT_DISABLED
          when: never
        - changes: !reference [.sfdx-changes]
    script:
        - NON_TEST_CLASSES=$((egrep -wrliL @IsTest deltas --include \*.cls || echo "") | xargs -rL 1 basename | sed 's/.cls//g' | paste -sd "," -)
        - echo "NON_TEST_CLASSES=$NON_TEST_CLASSES" >> non_tests.env
    artifacts:
        reports:
            dotenv: non_tests.env

verify-test-coverage:
    stage: verify-test-coverage
    rules:
        - if: $VALIDATION_DEPLOYMENT_DISABLED
          when: never
        - changes: !reference [.sfdx-changes]
    script:
        - sf plugins install nakama-plugin-sfdx
        - sf nps coverage formatters mappaths -p test-results/coverage/cobertura.xml -t cobertura
        - |
            if [ $NON_TEST_CLASSES ]; then
                sf nps coverage verify --path results.json --required-coverage 90 --classes $NON_TEST_CLASSES
            fi
    artifacts:
        when: always
        paths:
            - test-results/coverage/cobertura.xml
        reports:
            coverage_report:
                coverage_format: cobertura
                path: test-results/coverage/cobertura.xml

# Note: This job may be skipped or allow_failure: true since actual deployment can succeed under certain circumstances even if validation fails
vlocity-validation-deployment:
    stage: org-validations-vlocity
    rules:
        - if: $VALIDATION_DEPLOYMENT_DISABLED
          when: never
        - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
          changes: !reference [.vlocity-changes]
          variables:
              TARGET_ENVIRONMENT: 'devint'
        - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^release/
          changes: !reference [.vlocity-changes]
          variables:
              TARGET_ENVIRONMENT: 'staging'
    # Note: DESTINATION_ENVIRONMENT is renamed to TARGET_ENVIRONMENT so it does not conflicts with variable declared in .gitlab-ci.yml
    environment: $TARGET_ENVIRONMENT
    resource_group: $TARGET_ENVIRONMENT
    script:
        - DELTAS_FROM=$(eval echo \${${TARGET_ENVIRONMENT^^}_VLOCITY_LAST_DEPLOYMENT_COMMIT_SHA})
        # Note: upon rebasing release branch onto main, even if the previous commit SHA for the target environment does not exists,
        # deltas against HEAD are calculated from the previous branch status, and hence, only the changes on the rebased commits appear as deltas
        - VLOCITY_CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r $DELTAS_FROM HEAD -- **/vlocity/**)
        - VLOCITY_PACKAGES_TO_DEPLOY=$(for file in $VLOCITY_CHANGED_FILES; do echo ${file%/vlocity/*}; done | tr ' ' '\n' | sort -u)
        - DESTINATION_SFDX_AUTH_URL=$(eval echo \${${TARGET_ENVIRONMENT^^}_SFDX_AUTH_URL})
        - sfdx auth:sfdxurl:store --sfdxurlfile $DESTINATION_SFDX_AUTH_URL --setalias Org --setdefaultusername
        - |
            for PACKAGE in $VLOCITY_PACKAGES_TO_DEPLOY;
            do
                npx vlocity -sfdx.username Org -job $PACKAGE/vlocity.yaml validateLocalData --verbose true --simpleLogging true
            done

scratch-org-validations:
    stage: org-validations
    rules:
        - if: $VALIDATE_SCRATCH_ORG_DISABLED
          when: never
        - changes: !reference [.sfdx-changes]
    allow_failure: true
    environment:
        name: scratch/$CI_COMMIT_REF_SLUG
        url: $SCRATCH_ORG_URL
        # Dynamic environments stop automatically when their associated branch is deleted
        on_stop: delete-scratch-org
    resource_group: scratch/$CI_COMMIT_REF_SLUG
    script:
        - sfdx auth:sfdxurl:store --sfdxurlfile $DEVHUB_SFDX_AUTH_URL --setdefaultdevhubusername
        - sfdx force:org:create --definitionfile config/project-scratch-def.json --setdefaultusername --durationdays 1
        # Note: replace scratch org creation if scratch org pool is needed
        # - echo 'y' | sf plugins install sfpowerkit
        # - sf sfpowerkit pool fetch --tag base --setdefaultusername
        - SCRATCH_ORG_DETAILS=$(sfdx force:org:open --urlonly --json)
        - SCRATCH_ORG_URL=$(jq -r '.result.url' <<< $SCRATCH_ORG_DETAILS)
        - echo "SCRATCH_ORG_URL=$SCRATCH_ORG_URL" >> scratch.env
        - SCRATCH_ORG_USERNAME=$(jq -r '.result.username' <<< $SCRATCH_ORG_DETAILS)
        - echo "SCRATCH_ORG_USERNAME=$SCRATCH_ORG_USERNAME" >> scratch.env
        - npm install fast-xml-parser
        - node scripts/node/environment-replacements/main.js || true
        - cp --recursive specific-environments/scratch-org/. sfdx-source/ || true
        - sfdx force:source:push
        # Note: redundant and error prone due to running frameworks and project tests together, until this issue is fixed: https://trailblazer.salesforce.com/issues_view?id=a1p4V000002JRzNQAW
        # - sfdx force:apex:test:run --testlevel RunLocalTests --synchronous --resultformat human --loglevel error
    artifacts:
        reports:
            dotenv: scratch.env

delete-scratch-org:
    stage: delete-scratch-org
    rules:
        - if: $VALIDATE_SCRATCH_ORG_DISABLED
          when: never
        - changes: !reference [.sfdx-changes]
          when: manual
    allow_failure: true
    environment:
        name: scratch/$CI_COMMIT_REF_SLUG
        action: stop
    resource_group: scratch/$CI_COMMIT_REF_SLUG
    script:
        # Command below does not work because of missing auth information due to different running instance
        # - sfdx force:org:delete --noprompt --targetusername $SCRATCH_ORG_USERNAME
        - sfdx auth:sfdxurl:store --sfdxurlfile $DEVHUB_SFDX_AUTH_URL --setdefaultusername
        - sfdx force:data:record:delete --sobjecttype ScratchOrgInfo --where SignupUsername=$SCRATCH_ORG_USERNAME
