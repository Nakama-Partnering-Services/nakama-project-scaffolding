default:
    image: salesforce/salesforcedx:latest-full

.sfdx-changes:
    - sfdx-source/**/main/**/*
    - sfdx-source/**/test/classes/**/*

.vlocity-changes:
    - sfdx-source/**/vlocity/**/*

stages:
    - deploy-deltas
    - deploy-vlocity

deploy-deltas:
    stage: deploy-deltas
    rules:
        - if: $DESTINATION_ENVIRONMENT
          changes: !reference [.sfdx-changes]
    environment: $DESTINATION_ENVIRONMENT
    resource_group: $DESTINATION_ENVIRONMENT
    script:
        - LAST_DEPLOYMENT_COMMIT_SHA=$(eval echo \${${DESTINATION_ENVIRONMENT}_LAST_DEPLOYMENT_COMMIT_SHA})
        - source .env.replacements
        - curl -H "Authorization:token $NAKAMA_ACCESS_TOKEN" -H 'Accept:application/vnd.github.VERSION.raw' https://raw.githubusercontent.com/Nakama-Partnering-Services/nakama-project-scaffolding/main/scripts/shell/pipelines/deploy.sh > ./deploy.sh
        - chmod +x ./deploy.sh
        - ./deploy.sh $DESTINATION_ENVIRONMENT $LAST_DEPLOYMENT_COMMIT_SHA false NoTestRun
        - |
            curl --request PUT --header "PRIVATE-TOKEN: $PIPELINE_ACCESS_TOKEN" \
              "$CI_API_V4_URL/projects/$CI_PROJECT_ID/variables/${DESTINATION_ENVIRONMENT}_LAST_DEPLOYMENT_COMMIT_SHA" --form "value=$CI_COMMIT_SHA"

deploy-vlocity:
    stage: deploy-vlocity
    rules:
        - if: $DESTINATION_ENVIRONMENT
          changes: !reference [.vlocity-changes]
    environment: $DESTINATION_ENVIRONMENT
    resource_group: $DESTINATION_ENVIRONMENT
    script:
        - LAST_DEPLOYMENT_COMMIT_SHA=$(eval echo \${${DESTINATION_ENVIRONMENT}_VLOCITY_LAST_DEPLOYMENT_COMMIT_SHA})
        # Note: upon rebasing rc branch onto main, previous commit SHA for the destination environment would work if it still exists as part of any other branch in the repository,
        # even if that commit does not exist anymore in the rebased branch
        - SCOPE=$( if [ $PACKAGE_TO_DEPLOY ]; then echo "sfdx-source/$PACKAGE_TO_DEPLOY/vlocity/**"; else echo "**/vlocity/**"; fi )
        - VLOCITY_CHANGED_FILES=$(git diff-tree --diff-filter=AM --no-commit-id --name-only -r $LAST_DEPLOYMENT_COMMIT_SHA HEAD -- $SCOPE)
        - VLOCITY_PACKAGES_TO_DEPLOY=$(for file in $VLOCITY_CHANGED_FILES; do echo ${file%/vlocity/*}; done | tr ' ' '\n' | sort -u)
        - DESTINATION_SFDX_AUTH_URL=$(eval echo \${${DESTINATION_ENVIRONMENT}_SFDX_AUTH_URL})
        - echo $DESTINATION_SFDX_AUTH_URL > ./DESTINATION_SFDX_AUTH_URL.txt
        - sfdx auth:sfdxurl:store --sfdxurlfile ./DESTINATION_SFDX_AUTH_URL.txt --setalias Org --setdefaultusername
        - |
            for PACKAGE in $VLOCITY_PACKAGES_TO_DEPLOY;
            do
                PACKAGE=$(echo $PACKAGE | sed 's/sfdx\-source\///g')
                echo "Checking VBTDeployKey$PACKAGE ..."
                vlocity_cmt__Value__c=$(sfdx force:data:record:get -s vlocity_cmt__GeneralSettings__c -w "Name=VBTDeployKey$PACKAGE" --json | jq .result.vlocity_cmt__Value__c | tr -d '"')
                if [ "$(git cat-file -t $vlocity_cmt__Value__c)" != "commit" ]; then
                  echo "Commit stored in Vlocity Deployment Key not found in repository. Aborting to prevent full deployment" 1>&2;
                  exit 1
                fi
            done
        - |
            for PACKAGE in $VLOCITY_PACKAGES_TO_DEPLOY;
            do
                npx vlocity -sfdx.username Org -job $PACKAGE/vlocity.yaml packDeploy --verbose true --simpleLogging true
                npx vlocity -sfdx.username Org -job $PACKAGE/vlocity.yaml packRetry --verbose true --simpleLogging true
            done
        - |
            curl --request PUT --header "PRIVATE-TOKEN: $PIPELINE_ACCESS_TOKEN" \
              "$CI_API_V4_URL/projects/$CI_PROJECT_ID/variables/${DESTINATION_ENVIRONMENT}_VLOCITY_LAST_DEPLOYMENT_COMMIT_SHA" --form "value=$CI_COMMIT_SHA"
        - sf apex run --file ./scripts/apex/AllEnvironments/vlocityTemplateActivation.apex || true # ideally filtering if changes contain any template
        - npm install puppeteer && node ./scripts/node/AllEnvironments/omniscriptLWCActivation.js || true #  ideally filtering if changes contain LWC OS
